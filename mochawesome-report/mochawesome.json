{
  "stats": {
    "suites": 2,
    "tests": 3,
    "passes": 3,
    "pending": 0,
    "failures": 0,
    "start": "2025-06-25T04:32:06.446Z",
    "end": "2025-06-25T04:32:07.113Z",
    "duration": 667,
    "testsRegistered": 3,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ffae38fe-1bf6-4ccd-912e-7fcb3d269556",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b960c2ce-3d59-4e71-ac89-4a016fbc276c",
          "title": "Feature Reqres",
          "fullFile": "/Users/fera.fanesya/api_automation/tests/login.js",
          "file": "/tests/login.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get List",
              "fullTitle": "Feature Reqres Get List",
              "timedOut": false,
              "duration": 172,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await fetch(\"https://reqres.in/api/users?page=2\");\nconst data = await response.json();\n//console.log(data);\nassert.strictEqual(response.status, 200);\nassert.strictEqual(data.page, 2);\nassert.strictEqual(data.data[0].id, 7);\nassert.strictEqual(data.data[0].email, \"michael.lawson@reqres.in\");",
              "err": {},
              "uuid": "19f469ca-430f-4886-93d3-519e145a620a",
              "parentUUID": "b960c2ce-3d59-4e71-ac89-4a016fbc276c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Post Reqres",
              "fullTitle": "Feature Reqres Post Reqres",
              "timedOut": false,
              "duration": 465,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await fetch(\"https://reqres.in/api/users\",{\nmethod: \"POST\",\nheaders: {\n\"x-api-key\": \"reqres-free-v1\",\n\"content-Type\": \"application/json\",\n},\nbody: JSON.stringify({\n name: \"shinta\",\n job: \"leader\",\n }),\n});\nconst data = await response.json();\nassert.strictEqual(response.status,201);\n//assert.strictEqual(data.name, \"Kak Hendra\")\n//chai\n//expect(response.status).to.equal(201);",
              "err": {},
              "uuid": "12936f7f-a904-47c1-9830-2f364af9f5ff",
              "parentUUID": "b960c2ce-3d59-4e71-ac89-4a016fbc276c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "19f469ca-430f-4886-93d3-519e145a620a",
            "12936f7f-a904-47c1-9830-2f364af9f5ff"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 637,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d2d7cfdf-b078-4180-86b4-e9f84a9f9370",
          "title": "Validasi JSON Schema",
          "fullFile": "/Users/fera.fanesya/api_automation/tests/validate.js",
          "file": "/tests/validate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should validate response against schema",
              "fullTitle": "Validasi JSON Schema should validate response against schema",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responseData = {\nname: \"Gajah Lucu\",\nage: 60,\nisActive: true,\n};\nconst schema = {\ntype: \"object\",\nproperties: {\nname: { type: \"string\" },\nage: { type: \"number\" },\nisActive: { type: \"boolean\" },\n},\nrequired: [\"name\", \"age\", \"isActive\"],\n};\nconst validate = ajv.compile(schema);\nconst isValid = validate(responseData);\n// Cetak error jika tidak valid\nif (!isValid) {\nconsole.error(\"Schema validation errors:\", validate.errors);\n}\n//expect(isValid, JSON.stringify(validate.errors, null,2)).to.be.true;",
              "err": {},
              "uuid": "c429d2fa-fea7-4d46-a6e5-ad2dd1311b99",
              "parentUUID": "d2d7cfdf-b078-4180-86b4-e9f84a9f9370",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c429d2fa-fea7-4d46-a6e5-ad2dd1311b99"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 24,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}